(define list?
  (lambda (x)
    (if (eq? x '())
        #t
        (if (pair? x)
            (list? (cdr x))
            #f))))

(define dict (lambda (x) x))

(define get (lambda (dictio key)
        (if (eq? dictio '())
            (make-error "No matched key found in dict")
            (if (eq? (car (car dictio)) key)
                (cdr (car dictio))
                (get (cdr dictio) key)
            )
        )
    )
)

(define dict? (lambda (dictio)
        (if (dictform dictio)
            (if (allSymbols? dictio)
                (if (dupkeys? dictio)
                    #f
                    #t
                )
                #f
            )
            #f
        )
    )
)

(define dictform 
    (lambda (dictio) 
        (if (eq? dictio '())
            #t
            (if
                (pair? dictio)
                (if (pair? (car dictio))
                    (dictform (cdr dictio))
                    #f
                )
                #f
            )
        )
    )
)

(define allSymbols? (lambda (dictio)
        (if (eq? dictio '())
            #t
            (if (symbol? (car (car dictio)))
                (allSymbols? (cdr dictio))
                #f
            )
        )
    )
)

(define dupkeys? 
    (lambda (dictio)
        (if (eq? dictio '())
            #f
            (if (valInDict (cdr dictio) (car (car dictio)))
                #t
                (dupkeys? (cdr dictio))
            )
        )
    )
)

(define valInDict (lambda (dictio val)
        (if (eq? dictio '())
            #f
            (if (eq? (car (car dictio)) val)
                #t
                (valInDict (cdr dictio) val)
            )
        )
    )
)

(define make-error (lambda (msg) (list 'error msg)))

(define is-error?
  (lambda (x)
    (if (list? x)
        (eq? (car x) 'error)
        #f)))

(define bind
  (lambda (v f)
    (if (is-error? v)
        v
        (f v))))